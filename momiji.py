#!/usr/bin/env python3

from modules.connections import bot_token as bot_token
from discord.ext import commands
import sys
import os

from modules import first_run
from modules import db

user_extensions_directory = "user_extensions"
bridged_extensions_directory = "bridged_extensions"

if not os.path.exists("data"):
    print("Please configure this bot according to readme file.")
    sys.exit("data folder and it's contents are missing")
if not os.path.exists(user_extensions_directory):
    os.makedirs(user_extensions_directory)
if not os.path.exists(bridged_extensions_directory):
    os.makedirs(bridged_extensions_directory)

first_run.create_tables()

initial_extensions = [
    "cogs.AIMod",
    "cogs.BotManagement",
    "cogs.ChannelExporting", 
    "cogs.CRPair", 
    "cogs.Fun",
    "cogs.Img",
    "cogs.InspiroBot", 
    "cogs.MessageStats", 
    "cogs.Misc", 
    "cogs.Moderation", 
    "cogs.MomijiChannelImporting", 
    "cogs.MomijiCommands", 
    "cogs.MomijiSpeak", 
    "cogs.Music", 
    "cogs.Pinning", 
    "cogs.RegularRole",
    "cogs.SelfAssignableRoles", 
    "cogs.StatsBuilder", 
    "cogs.Utilities",
    "cogs.VoiceLogging",
    "cogs.VoiceRoles", 
    "cogs.Waifu",
    "cogs.Welcome",
    "cogs.Wasteland",
    "cogs.WastelandConfiguration",
]

bridged_extensions = db.query("SELECT extension_name FROM bridged_extensions")


class Momiji(commands.Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.background_tasks = []
        self.app_version = (open(".version", "r+").read()).rstrip()
        self.description = f"Momiji {self.app_version}"

        for extension in initial_extensions:
            try:
                self.load_extension(extension)
            except Exception as e:
                print(e)
        for bridged_extension in bridged_extensions:
            try:
                self.load_extension(f"{bridged_extensions_directory}.{bridged_extension[0]}")
                print(f"Bridged extension {bridged_extension[0]} loaded")
            except Exception as e:
                print(e)
        for user_extension in os.listdir(user_extensions_directory):
            if not user_extension.endswith(".py"):
                continue
            extension_name = user_extension.replace(".py","")
            try:
                self.load_extension(f"{user_extensions_directory}.{extension_name}")
                print(f"User extension {extension_name} loaded")
            except Exception as e:
                print(e)

    async def close(self):
        # Cancel all Task object generated by cogs.
        # This prevents any task still running due to having long sleep time.
        for task in self.background_tasks:
            task.cancel()

        # Run actual discord.py close.
        await super().close()

    async def on_ready(self):
        print("Logged in as")
        print(self.user.name)
        print(self.user.id)
        print("------")
        await first_run.add_admins(self)


client = Momiji(command_prefix=";")
client.run(bot_token)
